#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var chat = require('../chat');
var debug = require('debug')('epaper:server');
var https = require('https');
var fs = require('fs');
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

var options = {
	key: fs.readFileSync('../../openssl/privateKey.key'),
	cert: fs.readFileSync('../../openssl/cerficate.crt')
};

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

if (cluster.isMaster) {
        for (var i = 0; i < numCPUs; i++) {
                cluster.fork();
        }
        cluster.on('exit', function(deadWorker, code, signal) {
                var worker = cluster.fork();
                var newPID = worker.process.pid;
                var oldPID = deadWorker.process.pid;

                console.log('worker '+oldPID+' died.');
                console.log('worker '+newPID+' born.');
        });

        cluster.on('online', function(worker){
                console.log('worker #{' + worker.id + '}.online #{' + worker.process.pid + '}');
        });
        cluster.on('listening', function(worker, address){
                console.log('worker #{' + worker.id + '}.listening #{' + address.address + '}:#{' + address.port + '}');
        });
	cluster.on('error', function(err){
		console.error('worker  #{' + worker.id + '}.error! - ', err); 
	});
}else{
	/**
	 * Create HTTP server.
	 */
	var server = https.createServer(options, app);
	chat(server);

	/**
	 * Listen on provided port, on all network interfaces.
	 */
	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('uncaughtException', function (err) {
  console.error((new Date).toUTCString() + ' uncaughtException:', err.message);
  console.error(err.stack);
  process.exit(1);
});
